// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels(in *jlexer.Lexer, out *TradeList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TradeList, 0, 1)
			} else {
				*out = TradeList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Trade
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels(out *jwriter.Writer, in TradeList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TradeList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels1(in *jlexer.Lexer, out *Trade) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "size":
			out.Size = float64(in.Float64())
		case "price":
			out.Price = float64(in.Float64())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "trade_id":
			out.TradeID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels1(out *jwriter.Writer, in Trade) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"size\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Size))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"trade_id\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Trade) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Trade) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Trade) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Trade) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels2(in *jlexer.Lexer, out *CandleList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(CandleList, 0, 1)
			} else {
				*out = CandleList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Candle
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels2(out *jwriter.Writer, in CandleList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v CandleList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CandleList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CandleList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CandleList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels3(in *jlexer.Lexer, out *Candle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "open":
			out.Open = float64(in.Float64())
		case "high":
			out.High = float64(in.Float64())
		case "low":
			out.Low = float64(in.Float64())
		case "close":
			out.Close = float64(in.Float64())
		case "volume":
			out.Volume = float64(in.Float64())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels3(out *jwriter.Writer, in Candle) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"open\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.Open))
	}
	{
		const prefix string = ",\"high\":"
		out.RawString(prefix)
		out.Float64(float64(in.High))
	}
	{
		const prefix string = ",\"low\":"
		out.RawString(prefix)
		out.Float64(float64(in.Low))
	}
	{
		const prefix string = ",\"close\":"
		out.RawString(prefix)
		out.Float64(float64(in.Close))
	}
	{
		const prefix string = ",\"volume\":"
		out.RawString(prefix)
		out.Float64(float64(in.Volume))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Candle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Candle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComInfinityCounter2VhTraderInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Candle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Candle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComInfinityCounter2VhTraderInternalModels3(l, v)
}
